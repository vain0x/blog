<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FSharp on ベインのブログ</title>
    <link>https://vain0x.github.io/blog/tags/fsharp/</link>
    <description>Recent content in FSharp on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Sat, 04 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://vain0x.github.io/blog/tags/fsharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CombineLatestのリアクティブグリッチ</title>
      <link>https://vain0x.github.io/blog/2023-02-04/combine-latest-reactive-glitch/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2023-02-04/combine-latest-reactive-glitch/</guid>
      <description>&lt;p&gt;Rx.NETのCombineLatestオペレーターによってリアクティブグリッチ (一時的な非一貫性) が生じる例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F#][小ネタ] Unreachableアクティブパターン</title>
      <link>https://vain0x.github.io/blog/2022-10-21/unreachable-active-pattern/</link>
      <pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2022-10-21/unreachable-active-pattern/</guid>
      <description>&lt;p&gt;matchのネストを減らす小ネタ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>リンクのための型エイリアス</title>
      <link>https://vain0x.github.io/blog/2021-11-20/type-alias-as-link/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-11-20/type-alias-as-link/</guid>
      <description>&lt;p&gt;ソースコード上にリンクを張るために型エイリアスを使うことがある&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>可視性を使ってnever型もどきを作る</title>
      <link>https://vain0x.github.io/blog/2021-11-03/poor-mans-never-type/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-11-03/poor-mans-never-type/</guid>
      <description>&lt;p&gt;never型がない言語でも、可視性の制御を使うことでそれっぽいことができる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>相互再帰関数の型推論で問題になったケース</title>
      <link>https://vain0x.github.io/blog/2021-08-19/mutual-inference-problem/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-08-19/mutual-inference-problem/</guid>
      <description>&lt;p&gt;ミローネ言語 (F# のサブセットである自作言語) の型推論が壊れている。
どういうケースで壊れているかを書いておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>値とストレージの区別</title>
      <link>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</guid>
      <description>&lt;p&gt;値と値を配置する場所(ストレージ)を区別することで有名な問題を簡単に説明できることを述べる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>判別共用体が共通フィールドを持てたら嬉しい</title>
      <link>https://vain0x.github.io/blog/2021-04-24/shared-fields-in-discriminated-unions/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-04-24/shared-fields-in-discriminated-unions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>シクシク素数列を F# でやってみた</title>
      <link>https://vain0x.github.io/blog/2018-12-16/siku-siku-primes/</link>
      <pubDate>Sun, 16 Dec 2018 10:34:43 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-12-16/siku-siku-primes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://qiita.com/vain0x/items/8f8b6effb32cd68c22f3&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>F#でベンチマークをとる</title>
      <link>https://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/</link>
      <pubDate>Mon, 03 Sep 2018 23:59:34 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[F#][小ネタ] レコードリテラルと型注釈</title>
      <link>https://vain0x.github.io/blog/2018-03-11/fsharp-record-literal-and-type-annotation/</link>
      <pubDate>Sun, 11 Mar 2018 13:06:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-03-11/fsharp-record-literal-and-type-annotation/</guid>
      <description>&lt;p&gt;F# のレコードリテラルのちょっとした問題とちょっとした解決策。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>break可能なループを書こう - 関数型プログラミングのテクニック</title>
      <link>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/vain0x/items/ddef84e3959dffe6a88d&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手続き型言語を使う人に「F# のループ (for/while) は &lt;code&gt;break&lt;/code&gt; できない」というと驚かれるかもしれません。筆者は驚きました。途中で終了する可能性のあるループを書けなくて困りそうですが、その心配は不要です。F# では &lt;strong&gt;末尾再帰関数&lt;/strong&gt; を使って、&lt;code&gt;break&lt;/code&gt; や &lt;code&gt;continue&lt;/code&gt; のあるループと同じことができるからです。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
