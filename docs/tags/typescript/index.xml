<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on ベインのブログ</title>
    <link>https://vain0x.github.io/blog/tags/typescript/</link>
    <description>Recent content in TypeScript on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vain0x.github.io/blog/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GUIアプリのルーティング・ページ遷移</title>
      <link>https://vain0x.github.io/blog/2021-05-31/gui-navigation/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-05-31/gui-navigation/</guid>
      <description>&lt;p&gt;GUIアプリは複数のページ (画面) を持つことがある。これに関してぼんやり考えて採用した実装方針を書く。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>判別共用体が共通フィールドを持てたら嬉しい</title>
      <link>https://vain0x.github.io/blog/2021-04-24/shared-fields-in-discriminated-unions/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-04-24/shared-fields-in-discriminated-unions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ReactのよさはUIが第一級なこと</title>
      <link>https://vain0x.github.io/blog/2020-09-18/react-as-first-class-ui/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/react-as-first-class-ui/</guid>
      <description>&lt;p&gt;……という気がする。UI に関して何かやりたいときに必ずしも React の機能に頼らなくても、TypeScript の言語機能で書けて、そのまま型がつく、ということが多い。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>日時を文字列で持つ案 (Dateのことは忘れる)</title>
      <link>https://vain0x.github.io/blog/2020-09-18/date-as-string/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/date-as-string/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;TypeScript の日時を表現する Date 型は貧弱で使いにくい。&lt;/li&gt;
&lt;li&gt;日時の処理はライブラリを使うことになりがち。&lt;/li&gt;
&lt;li&gt;個人的には、Date オブジェクトの存在を無視して、日時を文字列で持つのがよいと思っている。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>関数を渡すvs.エフェクトを返す</title>
      <link>https://vain0x.github.io/blog/2020-09-18/passing-function-vs-returning-effect/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/passing-function-vs-returning-effect/</guid>
      <description>&lt;p&gt;どちらも計算の一部を抽象化できる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mapをレコード代わりにするための型付け</title>
      <link>https://vain0x.github.io/blog/2020-09-07/type-of-map-as-record/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-07/type-of-map-as-record/</guid>
      <description>&lt;p&gt;TypeScript ではレコードにも連想配列にも object が使われがち。レコードのために object ではなく Map を使いつつ、object と同じような入力補完などの恩恵を受ける方法を考えた。実用的ではない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #4 シンボルのリネーム</title>
      <link>https://vain0x.github.io/blog/2019-01-16/lsp-trial-04/</link>
      <pubDate>Wed, 16 Jan 2019 22:17:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-16/lsp-trial-04/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://qiita.com/vain0x/items/8414dca7425057f1bbd8&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自作言語の LSP サーバーを作るプロジェクトの第4回です。今回はソースコードを変更する機能の例として、シンボルのリネームを実装してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #3 シンボルとハイライト</title>
      <link>https://vain0x.github.io/blog/2019-01-10/lsp-trial-03/</link>
      <pubDate>Thu, 10 Jan 2019 22:12:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-10/lsp-trial-03/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://qiita.com/vain0x/items/31252d77066505ce6117&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自作言語の LSP サーバーを作るプロジェクトの第3回です。今回はシンボルテーブルを作ってシンボルのハイライト機能を実装します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #2 クラゲ言語の構文解析</title>
      <link>https://vain0x.github.io/blog/2019-01-07/lsp-trial-02/</link>
      <pubDate>Mon, 07 Jan 2019 22:13:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-07/lsp-trial-02/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://qiita.com/vain0x/items/490ae33ba3db3c829c13&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSP サーバーを作っていくプロジェクトの第2回です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #1</title>
      <link>https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/</link>
      <pubDate>Sat, 05 Jan 2019 23:52:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://qiita.com/vain0x/items/d050fe7c8b342ed2004e&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSP サーバーの実装の練習をしています。この記事は勉強ノートとして、調査事項をまとめつつ、成果物を作成した手順を解説します。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
