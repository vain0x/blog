<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp on ベインのブログ</title>
    <link>https://vain0x.github.io/blog/tags/csharp/</link>
    <description>Recent content in CSharp on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Sat, 26 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vain0x.github.io/blog/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>値とストレージの区別</title>
      <link>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</guid>
      <description>&lt;p&gt;値と値を配置する場所(ストレージ)を区別することで有名な問題を簡単に説明できることを述べる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>async関数が例外を捕捉する挙動について</title>
      <link>https://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[C#] コンストラクタの自動生成 #1</title>
      <link>https://vain0x.github.io/blog/2017-12-04/csharp-constructor-generation-01/</link>
      <pubDate>Mon, 04 Dec 2017 00:31:05 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-12-04/csharp-constructor-generation-01/</guid>
      <description>&lt;h2 id=&#34;要約&#34;&gt;要約&lt;/h2&gt;
&lt;p&gt;C# のフィールドや自動実装プロパティーの定義から、完全コンストラクターを自動生成したい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IReadOnlyListがIListを実装すべき理由</title>
      <link>https://vain0x.github.io/blog/2017-05-20/why-ireadonlylist-should-implement-ilist/</link>
      <pubDate>Sat, 20 May 2017 20:00:09 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-05-20/why-ireadonlylist-should-implement-ilist/</guid>
      <description>&lt;p&gt;主張: &lt;code&gt;IReadOnlyList&amp;lt;_&amp;gt;&lt;/code&gt; を実装するクラスは、 &lt;code&gt;IList&amp;lt;_&amp;gt;&lt;/code&gt; と &lt;code&gt;IList&lt;/code&gt; も実装したほうがいい。&lt;/p&gt;
&lt;p&gt;理由は2つあります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>awaitでスレッドを切り替える</title>
      <link>https://vain0x.github.io/blog/2017-04-05/switch-on-await/</link>
      <pubDate>Wed, 05 Apr 2017 15:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-04-05/switch-on-await/</guid>
      <description>&lt;p&gt;awaitでスレッドを切り替えるための簡単なヘルパーメソッドを作ったので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EnumerableTest(.NETの単体テストフレームワーク)の紹介と苦労話</title>
      <link>https://vain0x.github.io/blog/2017-03-21/enumerable-test/</link>
      <pubDate>Tue, 21 Mar 2017 13:39:33 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-21/enumerable-test/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://github.com/vain0x/EnumerableTest&#34;&gt;EnumerableTest&lt;/a&gt; という .NET 向けの単体テストフレームワークを作成しました。&lt;/p&gt;
&lt;p&gt;具体的な使い方は &lt;a href=&#34;https://vain0x.github.io/EnumerableTest/articles/tutorials/walk-around.html&#34;&gt;チュートリアル&lt;/a&gt; を参照してもらうとして、ここでは宣伝的な内容と、実装時の苦労話、今後の展望について述べます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>観測可能なコレクションの設計考察</title>
      <link>https://vain0x.github.io/blog/2017-03-10/observable-collection-design-notes/</link>
      <pubDate>Fri, 10 Mar 2017 14:42:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-10/observable-collection-design-notes/</guid>
      <description>&lt;p&gt;WPF 用のコレクションを設計しようとしてぐだぐだ考えた話をします。&lt;a href=&#34;https://github.com/DotNetKit/DotNetKit.Reactive/tree/z_observable_list_rwlock&#34;&gt;うまくいかない設計に基づく実装をけっこう書いてしまった&lt;/a&gt; ので、その供養でもあります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>break可能なループを書こう - 関数型プログラミングのテクニック</title>
      <link>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/vain0x/items/ddef84e3959dffe6a88d&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手続き型言語を使う人に「F# のループ (for/while) は &lt;code&gt;break&lt;/code&gt; できない」というと驚かれるかもしれません。筆者は驚きました。途中で終了する可能性のあるループを書けなくて困りそうですが、その心配は不要です。F# では &lt;strong&gt;末尾再帰関数&lt;/strong&gt; を使って、&lt;code&gt;break&lt;/code&gt; や &lt;code&gt;continue&lt;/code&gt; のあるループと同じことができるからです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WPF/XAMLで帳票のデザイン・印刷を行う</title>
      <link>https://vain0x.github.io/blog/2016-12-25/reports-with-wpf/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-12-25/reports-with-wpf/</guid>
      <description>&lt;p&gt;※これは &lt;a href=&#34;http://qiita.com/advent-calendar/2016/xaml&#34;&gt;XAML Advent Calendar 2016&lt;/a&gt; の25日目の記事です。&lt;/p&gt;
&lt;p&gt;WPF/XAML を使って帳票のデザインから印刷までやってみたという話です。ソースコードが GitHub にありますので、それと同様にやればできます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vain0x/VainZero.WpfReportPrinting&#34;&gt;vain0x/VainZero.WpfReportPrinting: WPFで帳票を作成するサンプル&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;要約&#34;&gt;要約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XAML というマークアップ言語で帳票のデザインから印刷までできれば、たくさんの利点がある。&lt;/li&gt;
&lt;li&gt;WPF アプリケーションで帳票のプレビューや印刷を行うサンプルを作った。&lt;/li&gt;
&lt;li&gt;ページネーションが大変だったけどなんとかなった。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>IReadOnlyListの列挙時にヒープ領域の使用を避ける</title>
      <link>https://vain0x.github.io/blog/2016-12-21/lists-with-no-alloc-enumerator/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-12-21/lists-with-no-alloc-enumerator/</guid>
      <description>&lt;p&gt;IReadOnlyListの列挙時にヒープ領域の使用を避ける方法を紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nullオブジェクトパターンの紹介と正体</title>
      <link>https://vain0x.github.io/blog/2016-08-18/null-object-patterns/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-08-18/null-object-patterns/</guid>
      <description>&lt;p&gt;デザインパターン「Nullオブジェクト」について解説します。加えて、後半でNullオブジェクトパターンに関する私見を述べます。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
