<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp on ベインのブログ</title>
    <link>https://vain0x.github.io/blog/tags/csharp/</link>
    <description>Recent content in CSharp on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Sat, 26 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vain0x.github.io/blog/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>値とストレージの区別</title>
      <link>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</guid>
      <description>&lt;p&gt;値と値を配置する場所(ストレージ)を区別することで有名な問題を簡単に説明できることを述べる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>async関数が例外を捕捉する挙動について</title>
      <link>https://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</guid>
      <description></description>
    </item>
    
    <item>
      <title>break可能なループを書こう - 関数型プログラミングのテクニック</title>
      <link>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/vain0x/items/ddef84e3959dffe6a88d&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手続き型言語を使う人に「F# のループ (for/while) は &lt;code&gt;break&lt;/code&gt; できない」というと驚かれるかもしれません。筆者は驚きました。途中で終了する可能性のあるループを書けなくて困りそうですが、その心配は不要です。F# では &lt;strong&gt;末尾再帰関数&lt;/strong&gt; を使って、&lt;code&gt;break&lt;/code&gt; や &lt;code&gt;continue&lt;/code&gt; のあるループと同じことができるからです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IReadOnlyListの列挙時にヒープ領域の使用を避ける</title>
      <link>https://vain0x.github.io/blog/2016-12-21/lists-with-no-alloc-enumerator/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-12-21/lists-with-no-alloc-enumerator/</guid>
      <description>&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;: 現在は推奨していません。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nullオブジェクトパターンの紹介と正体</title>
      <link>https://vain0x.github.io/blog/2016-08-18/null-object-patterns/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-08-18/null-object-patterns/</guid>
      <description>&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;: 現在は推奨していません。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
