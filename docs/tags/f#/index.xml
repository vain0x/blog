<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>F# on ベインのブログ</title>
    <link>https://vain0x.github.io/blog/tags/f#/</link>
    <description>Recent content in F# on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Wed, 03 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vain0x.github.io/blog/tags/f#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>可視性を使ってnever型もどきを作る</title>
      <link>https://vain0x.github.io/blog/2021-11-03/poor-mans-never-type/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-11-03/poor-mans-never-type/</guid>
      <description>never型がない言語でも、可視性の制御を使うことでそれっぽいことができる。
前提 F# において制御を返さない関数は、結果の型が任意であるような多相関数として表現される。
/// 常に例外を投げる関数 val failwith&amp;lt;&amp;#39;A&amp;gt; : string -&amp;gt; &amp;#39;A F# の型システムにおいて多相になれるのはnominalな型や関数だけなので、制御を返さない関数を持つフィールドというのは作れない。
type R = { FailWith: string -&amp;gt; (*never型? *) } 型抽象(Λ)があったらできた。
// F# ではない。 type R = { FailWith: Λ&amp;#39;A. string -&amp;gt; &amp;#39;A } なお、型変数をレコード型のほうに持たせると意味が変わってくる。
type R&amp;lt;&amp;#39;A&amp;gt; = { FailWith: string -&amp;gt; &amp;#39;A } これだと FailWith を複数回、異なる結果型で呼ぶことができない。(Rの型引数が矛盾する。)
方法 はじめに適当にNever型を定義する。型は公開するが、型のインスタンスを作る方法は公開しないでおく。
type Never = private | Never この型の値を受け取るnever関数を公開する。
let never&amp;lt;&amp;#39;A&amp;gt; (_: Never) : &amp;#39;A = assert false // この関数が呼ばれないことをコンパイラに教える  failwith &amp;#34;never&amp;#34; // 制御を返さない何らかの式 使いみち 例えば別のプログラムを実行する exec 関数を抽象的に受け取りたいとする。</description>
    </item>
    
    <item>
      <title>相互再帰関数の型推論で問題になったケース</title>
      <link>https://vain0x.github.io/blog/2021-08-19/mutual-inference-problem/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-08-19/mutual-inference-problem/</guid>
      <description>&lt;p&gt;ミローネ言語 (F# のサブセットである自作言語) の型推論が壊れている。
どういうケースで壊れているかを書いておく。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>