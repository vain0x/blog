<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ベインのブログ</title>
    <link>https://vain0x.github.io/blog/</link>
    <description>Recent content on ベインのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>vainzerox@gmail.com (ベイン)</managingEditor>
    <webMaster>vainzerox@gmail.com (ベイン)</webMaster>
    <lastBuildDate>Thu, 02 Sep 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vain0x.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>コンパイラでのエラーの扱い</title>
      <link>https://vain0x.github.io/blog/compiler-errors/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/compiler-errors/</guid>
      <description>&lt;p&gt;コンパイラを作っているうちに、コンパイラの各ステージにおけるエラーの扱いについて考えが変わった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-08-31</title>
      <link>https://vain0x.github.io/blog/2021-08-31/diary/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-08-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語、knowbug)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>相互再帰関数の型推論で問題になったケース</title>
      <link>https://vain0x.github.io/blog/2021-08-19/mutual-inference-problem/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-08-19/mutual-inference-problem/</guid>
      <description>&lt;p&gt;ミローネ言語 (F# のサブセットである自作言語) の型推論が壊れている。
どういうケースで壊れているかを書いておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-07-31</title>
      <link>https://vain0x.github.io/blog/2021-07-31/diary/</link>
      <pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-07-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語、パーサの無限ループバグなど)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>コメントを//で書くか;で書くか</title>
      <link>https://vain0x.github.io/blog/2021-07-14/hsp3-comment-style/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-07-14/hsp3-comment-style/</guid>
      <description>&lt;p&gt;HSP3は &lt;code&gt;;&lt;/code&gt; と &lt;code&gt;//&lt;/code&gt; の2種類のコメントがあって、長いこと &lt;code&gt;//&lt;/code&gt; を使ってきたけど、&lt;code&gt;;&lt;/code&gt; に変えるかも……という話。(わりとどうでもいい話。)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-06-30</title>
      <link>https://vain0x.github.io/blog/2021-06-30/diary/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-06-30/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語、LALRとreturn式、HSP3アナライザミニ、hsp3-debug-window-adapter、行分割DPと禁則処理、ブログテーマの改修など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>値とストレージの区別</title>
      <link>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-06-26/value-vs-storage/</guid>
      <description>&lt;p&gt;値と値を配置する場所(ストレージ)を区別することで有名な問題を簡単に説明できることを述べる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GUIアプリのルーティング・ページ遷移</title>
      <link>https://vain0x.github.io/blog/2021-05-31/gui-navigation/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-05-31/gui-navigation/</guid>
      <description>&lt;p&gt;GUIアプリは複数のページ (画面) を持つことがある。これに関してぼんやり考えて採用した実装方針を書く。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-05-31</title>
      <link>https://vain0x.github.io/blog/2021-05-31/diary/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-05-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (HSP3アナライザーミニなど)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-04-30</title>
      <link>https://vain0x.github.io/blog/2021-04-30/diary/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-04-30/diary/</guid>
      <description>&lt;p&gt;今月の活動 (HSP3アナライザーミニなど)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>判別共用体が共通フィールドを持てたら嬉しい</title>
      <link>https://vain0x.github.io/blog/2021-04-24/shared-fields-in-discriminated-unions/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-04-24/shared-fields-in-discriminated-unions/</guid>
      <description>&lt;p&gt;判別共用体のすべてのバリアントに同じデータを持たせたいことがあるが、F# だとめんどい。
TypeScriptだと楽にできて嬉しい。
処理系の実装方針を考えてみたが、利用頻度のわりに量が多い気がしてきた、という話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-03-31</title>
      <link>https://vain0x.github.io/blog/2021-03-31/diary/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-03-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>関数型プログラミング言語の構文は「すべてが式」ではない</title>
      <link>https://vain0x.github.io/blog/2021-03-30/nonexpression-syntax-in-functional-programming-language/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-03-30/nonexpression-syntax-in-functional-programming-language/</guid>
      <description>&lt;p&gt;関数型プログラミング言語の構文は「すべてが式」であるという標語がしばしばみられるが、これはいいすぎ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ミローネ言語の開発用にビルドツールninjaを使っている感想など</title>
      <link>https://vain0x.github.io/blog/2021-03-29/ninja-thoughts/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-03-29/ninja-thoughts/</guid>
      <description>&lt;p&gt;ミローネ言語の開発にビルドツールninjaを使いはじめて、それなりに時間がたったので、雑感を記事に書いておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング言語の構文とセミコロン</title>
      <link>https://vain0x.github.io/blog/2021-03-21/semicolon-syntax/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-03-21/semicolon-syntax/</guid>
      <description>&lt;p&gt;C言語の各文末にセミコロンが必須な構文は書いていてめんどくさいといわれる。
Cの構文を踏襲しつつセミコロンを省略可能にした言語がいくつかあるので、その手法と性質、課題をみていく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C言語の構文とセミコロンが必須な箇所はどこか&lt;/li&gt;
&lt;li&gt;JavaScriptのセミコロン省略により生じた問題とは何か&lt;/li&gt;
&lt;li&gt;Goのセミコロン省略ルールはどう定められているか&lt;/li&gt;
&lt;li&gt;Haskellのレイアウト依存構文はセミコロンの省略にどう生かされているか&lt;/li&gt;
&lt;li&gt;Rustの構文からセミコロンを取り除くとしたらどんな問題が生じるか&lt;/li&gt;
&lt;li&gt;F# のリストがセミコロン区切りである利点と欠点&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-02-28</title>
      <link>https://vain0x.github.io/blog/2021-02-28/diary/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-02-28/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語、DAPサンプル実装を作った、など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2021-01-31</title>
      <link>https://vain0x.github.io/blog/2021-01-31/diary/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2021-01-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語、ジェネリクス引数のカッコの話など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-12-31</title>
      <link>https://vain0x.github.io/blog/2020-12-31/diary/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-12-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語、並行リバーシの試作など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-11-30</title>
      <link>https://vain0x.github.io/blog/2020-11-30/diary/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-11-30/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-10-31</title>
      <link>https://vain0x.github.io/blog/2020-10-31/diary/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-10-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ミローネ言語の高速化、クロージャ変換の手順の話、IDE 風のターミナルエミュレータ、など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-09-30</title>
      <link>https://vain0x.github.io/blog/2020-09-30/diary/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-30/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ジャッコ言語のスコープ解決、型システムの悩み、sql-placeholder-js、短い記事を書いた、など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>式指向構文が言語処理系にもたらす複雑性</title>
      <link>https://vain0x.github.io/blog/2020-09-19/complexity-from-expression-oriented-syntax/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-19/complexity-from-expression-oriented-syntax/</guid>
      <description>&lt;p&gt;式の中に分岐や反復、ジャンプを書ける構文を &lt;strong&gt;式指向の構文&lt;/strong&gt; と呼ぶことにする。
式指向の構文は便利な反面、言語に一定の複雑性を追加する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nullはポインタだがリファレンスではない</title>
      <link>https://vain0x.github.io/blog/2020-09-18/null-pointer-vs-reference/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/null-pointer-vs-reference/</guid>
      <description>&lt;p&gt;null ポインタの存在は正当化できるかもしれないが、null 参照の存在は正当化できないのでは、という考え。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ReactのよさはUIが第一級なこと</title>
      <link>https://vain0x.github.io/blog/2020-09-18/react-as-first-class-ui/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/react-as-first-class-ui/</guid>
      <description>&lt;p&gt;……という気がする。UI に関して何かやりたいときに必ずしも React の機能に頼らなくても、TypeScript の言語機能で書けて、そのまま型がつく、ということが多い。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>日時を文字列で持つ案 (Dateのことは忘れる)</title>
      <link>https://vain0x.github.io/blog/2020-09-18/date-as-string/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/date-as-string/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;TypeScript の日時を表現する Date 型は貧弱で使いにくい。&lt;/li&gt;
&lt;li&gt;日時の処理はライブラリを使うことになりがち。&lt;/li&gt;
&lt;li&gt;個人的には、Date オブジェクトの存在を無視して、日時を文字列で持つのがよいと思っている。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>関数を渡すvs.エフェクトを返す</title>
      <link>https://vain0x.github.io/blog/2020-09-18/passing-function-vs-returning-effect/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-18/passing-function-vs-returning-effect/</guid>
      <description>&lt;p&gt;どちらも計算の一部を抽象化できる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mapをレコード代わりにするための型付け</title>
      <link>https://vain0x.github.io/blog/2020-09-07/type-of-map-as-record/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-09-07/type-of-map-as-record/</guid>
      <description>&lt;p&gt;TypeScript ではレコードにも連想配列にも object が使われがち。レコードのために object ではなく Map を使いつつ、object と同じような入力補完などの恩恵を受ける方法を考えた。実用的ではない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-08-31</title>
      <link>https://vain0x.github.io/blog/2020-08-31/diary/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-08-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ジャッコ言語)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-07-31</title>
      <link>https://vain0x.github.io/blog/2020-07-31/diary/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-07-31/diary/</guid>
      <description>&lt;p&gt;今月の活動 (ジャッコ言語など) や、気になった記事の感想など&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-06-30</title>
      <link>https://vain0x.github.io/blog/2020-06-30/diary/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-06-30/diary/</guid>
      <description>&lt;p&gt;今月の活動について (ジャッコ言語、競プロ、気になった記事の感想など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-05-31</title>
      <link>https://vain0x.github.io/blog/2020-05-31/diary/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-05-31/diary/</guid>
      <description>&lt;p&gt;今月の活動について (ジャッコ言語、競プロ、気になった記事の感想など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-02-29</title>
      <link>https://vain0x.github.io/blog/2020-02-29/diary/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-02-29/diary/</guid>
      <description>&lt;p&gt;今月の活動について (HSP3 フォージェリ、競プロなど)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2020-01-31</title>
      <link>https://vain0x.github.io/blog/2020-01-31/diary/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-01-31/diary/</guid>
      <description>&lt;p&gt;今月の活動について (CPS 中間表現、静的契約、HSP3 フォージェリ、競プロなど)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ミローネ言語コンパイラ・HSP3開発ツール群の振り返りと今後の構想</title>
      <link>https://vain0x.github.io/blog/2020-01-11/after-milone-and-ginger/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2020-01-11/after-milone-and-ginger/</guid>
      <description>&lt;p&gt;2019年、ミローネ言語コンパイラや HSP3 GINGER (HSP3 言語の LSP やデバッガなど) を開発した経験に基づく、今後の展開の構想について。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-12-31</title>
      <link>https://vain0x.github.io/blog/2019-12-31/diary/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-12-31/diary/</guid>
      <description>&lt;p&gt;今月の活動について (knowbug リリース、網羅性検査の記事、HSP3 の記事、X-BNF 言語など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-11-30</title>
      <link>https://vain0x.github.io/blog/2019-11-30/diary/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-11-30/diary/</guid>
      <description>&lt;p&gt;今月の活動について (knowbug の HSP3 クライアント化、HSP3 の LSP (hsp3-analyzer-mini) 作成、ゾアライド言語の始動、競プロ(サボりがち)、など)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>データベースをスコープで分けてテストしやすくする</title>
      <link>https://vain0x.github.io/blog/2019-11-28/scoped-database/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-11-28/scoped-database/</guid>
      <description>&lt;p&gt;データベースを使うテストを書きやすくできるかもしれない方法について述べます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-10-31</title>
      <link>https://vain0x.github.io/blog/2019-10-31/diary/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-10-31/diary/</guid>
      <description>&lt;p&gt;今月の活動について (ミローネ言語, knowbug, 競プロ, AtGraph, checklist)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-09-30</title>
      <link>https://vain0x.github.io/blog/2019-09-30/diary/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-09-30/diary/</guid>
      <description>&lt;p&gt;今月の活動について (ミローネ言語, LR構文解析, 競プロ, HTTPS/TLS)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-08-31</title>
      <link>https://vain0x.github.io/blog/2019-08-31/diary/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-08-31/diary/</guid>
      <description>&lt;p&gt;今月の活動について (ミローネ言語, 競プロ)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-07-31</title>
      <link>https://vain0x.github.io/blog/2019-07-31/diary/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-07-31/diary/</guid>
      <description>&lt;p&gt;今月の活動について (ミローネ言語, knowbug, 競プロ, ブログ)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-06-30</title>
      <link>https://vain0x.github.io/blog/2019-06-30/diary/</link>
      <pubDate>Sun, 30 Jun 2019 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-06-30/diary/</guid>
      <description>&lt;p&gt;今月の活動について&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-05-31</title>
      <link>https://vain0x.github.io/blog/2019-05-31/diary/</link>
      <pubDate>Fri, 31 May 2019 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-05-31/diary/</guid>
      <description>&lt;p&gt;今月の活動のまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-04-30</title>
      <link>https://vain0x.github.io/blog/2019-04-30/diary/</link>
      <pubDate>Tue, 30 Apr 2019 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-04-30/diary/</guid>
      <description>&lt;p&gt;今月の活動のまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-03-31</title>
      <link>https://vain0x.github.io/blog/2019-03-31/diary/</link>
      <pubDate>Sun, 31 Mar 2019 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-03-31/diary/</guid>
      <description>&lt;p&gt;今月の活動のまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-02-27</title>
      <link>https://vain0x.github.io/blog/2019-02-27/diary/</link>
      <pubDate>Wed, 27 Feb 2019 23:31:49 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-02-27/diary/</guid>
      <description>&lt;p&gt;今月の活動のまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HSP3 でスクリプト言語の処理系を書く</title>
      <link>https://vain0x.github.io/blog/2019-02-26/interpreter-written-in-hsp3/</link>
      <pubDate>Tue, 26 Feb 2019 22:25:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-02-26/interpreter-written-in-hsp3/</guid>
      <description>&lt;p&gt;HSP3 は BASIC 風の構文を持つスクリプト言語で、GUI プログラミングがやりやすいことに人気がある。私は10年ぐらい前に、どういうわけかその HSP3 でインタプリタを書いて失敗した。&lt;/p&gt;
&lt;p&gt;10年ほど経って問題の解決策が分かってきた感じがしたので、改めて似たようなものを作ってみた。まだ10日ほどしか作業しておらずプロトタイプ段階といえるが、頭の中にあった解決策が実際に問題を解決できているという実感が得られた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2019-01-30</title>
      <link>https://vain0x.github.io/blog/2019-01-30/diary/</link>
      <pubDate>Wed, 30 Jan 2019 20:07:49 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-30/diary/</guid>
      <description>&lt;p&gt;今月の活動のまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #4 シンボルのリネーム</title>
      <link>https://vain0x.github.io/blog/2019-01-16/lsp-trial-04/</link>
      <pubDate>Wed, 16 Jan 2019 22:17:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-16/lsp-trial-04/</guid>
      <description>&lt;p&gt;自作言語の LSP サーバーを作るプロジェクトの第4回です。今回はソースコードを変更する機能の例として、シンボルのリネームを実装してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #3 シンボルとハイライト</title>
      <link>https://vain0x.github.io/blog/2019-01-10/lsp-trial-03/</link>
      <pubDate>Thu, 10 Jan 2019 22:12:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-10/lsp-trial-03/</guid>
      <description>&lt;p&gt;自作言語の LSP サーバーを作るプロジェクトの第3回です。今回はシンボルテーブルを作ってシンボルのハイライト機能を実装します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #2 クラゲ言語の構文解析</title>
      <link>https://vain0x.github.io/blog/2019-01-07/lsp-trial-02/</link>
      <pubDate>Mon, 07 Jan 2019 22:13:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-07/lsp-trial-02/</guid>
      <description>&lt;p&gt;LSP サーバーを作っていくプロジェクトの第2回です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前回: &lt;a href=&#34;https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/&#34;&gt;LSP学習記 #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前回は警告の表示までできるようになりました。しかしこの調子で自明な機能を足し続けても楽しくないので、新しいプログラミング言語を作ります。自作言語処理系とともに LSP サーバーを育てていく予定です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今回のソースコード: &lt;a href=&#34;https://github.com/vain0x/curage-lang/tree/v0.3.0&#34;&gt;curage-lang v0.3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LSP学習記 #1</title>
      <link>https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/</link>
      <pubDate>Sat, 05 Jan 2019 23:52:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2019-01-05/lsp-trial-01/</guid>
      <description>&lt;p&gt;LSP サーバーの実装の練習をしています。この記事は勉強ノートとして、調査事項をまとめつつ、成果物を作成した手順を解説します。&lt;/p&gt;
&lt;p&gt;第1回では LSP の基礎部分に触れ、極小の LSP サーバーを準備し、「エディター上にリアルタイムで警告を表示する」機能を作ります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2018-12-31</title>
      <link>https://vain0x.github.io/blog/2018-12-31/diary/</link>
      <pubDate>Mon, 31 Dec 2018 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-12-31/diary/</guid>
      <description>&lt;p&gt;今月の進捗など&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>シクシク素数列を F# でやってみた</title>
      <link>https://vain0x.github.io/blog/2018-12-16/siku-siku-primes/</link>
      <pubDate>Sun, 16 Dec 2018 10:34:43 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-12-16/siku-siku-primes/</guid>
      <description>&lt;p&gt;シクシク素数列アドベントカレンダーという、単一の問題を毎日異なる言語で解く催しがあるみたいです。F# での参加者はいないみたいなので、カレンダー不参加ですがやってみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2018-11-30</title>
      <link>https://vain0x.github.io/blog/2018-11-30/diary/</link>
      <pubDate>Fri, 30 Nov 2018 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-11-30/diary/</guid>
      <description>&lt;p&gt;1ヶ月分のコミットメッセージとツイートを眺めていろいろ書くやつ、3回目&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>円周率チャレンジにアルゴリズムでチャレンジ</title>
      <link>https://vain0x.github.io/blog/2018-11-08/pi-challenge/</link>
      <pubDate>Thu, 08 Nov 2018 02:01:00 +0900</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-11-08/pi-challenge/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://rirosi.net/plus2/&#34;&gt;円周率チャレンジ&lt;/a&gt; というゲームが流行中です！&lt;/p&gt;
&lt;p&gt;プログラムを使って良い解法を探索してみたので、考えたことを書いていきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2018-10-31</title>
      <link>https://vain0x.github.io/blog/2018-10-31/diary/</link>
      <pubDate>Wed, 31 Oct 2018 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-10-31/diary/</guid>
      <description>&lt;p&gt;今月の活動まとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vain0x.github.io/blog/2018-09-30/diary/&#34;&gt;前月&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rustで競プロするときのプラクティス [2018秋]</title>
      <link>https://vain0x.github.io/blog/2018-10-07/rust-procon/</link>
      <pubDate>Sun, 07 Oct 2018 20:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-10-07/rust-procon/</guid>
      <description>&lt;p&gt;競プロで Rust を使い始めて半年が過ぎました。いまの私のプラクティスを羅列的に書いていきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況 2018-09-30</title>
      <link>https://vain0x.github.io/blog/2018-09-30/diary/</link>
      <pubDate>Sun, 30 Sep 2018 23:59:59 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-09-30/diary/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;校正の手間を省くため、なるべく箇条書きでやっていく
&lt;ul&gt;
&lt;li&gt;通常の文章を書く頭は README と競プロ参戦記に使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Twitter ではなく、まとまったものを書いていきたい&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>F#でベンチマークをとる</title>
      <link>https://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/</link>
      <pubDate>Mon, 03 Sep 2018 23:59:34 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-09-03/bench-fsharp-by-benchmark-dot-net/</guid>
      <description>&lt;p&gt;ベンチマークをとるのは難しい作業です。それらの作業を担う便利なライブラリーとして &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet&#34;&gt;BenchmarkDotNet&lt;/a&gt; があります。本稿では、これを使ってベンチマークをとる例をやっていき、 minimum viable introduction (実用最低限の導入) となることを目指します。&lt;/p&gt;
&lt;h2 id=&#34;1-&#34;&gt;1. 要約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;書き出し
&lt;ul&gt;
&lt;li&gt;ベンチマークは意外と大変という話について軽く触れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;導入
&lt;ul&gt;
&lt;li&gt;本稿の構成&lt;/li&gt;
&lt;li&gt;開発環境の明記&lt;/li&gt;
&lt;li&gt;BenchmarkDotNet のサンプル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例
&lt;ul&gt;
&lt;li&gt;一例として「素数判定」を実装する&lt;/li&gt;
&lt;li&gt;素数判定の簡単なベンチマークを書く&lt;/li&gt;
&lt;li&gt;ベンチマークを実行する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;おまけ
&lt;ul&gt;
&lt;li&gt;軽くて速いベンチマークに設定する&lt;/li&gt;
&lt;li&gt;ベンチマークを watch する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rustのクロージャで再帰してみた</title>
      <link>https://vain0x.github.io/blog/2018-06-28/recurse-rust-closure/</link>
      <pubDate>Thu, 28 Jun 2018 23:17:41 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-06-28/recurse-rust-closure/</guid>
      <description>&lt;p&gt;クロージャを再帰呼び出しする方法を考えました。&lt;/p&gt;
&lt;p&gt;競技プログラミングではローカル変数を書き換えながら再帰する処理がよく出てきます。しかし Rust でそれを書こうとするとやや冗長になりがちです。&lt;/p&gt;
&lt;p&gt;本稿では小さなヘルパーを用意して記述を簡略化することを試みました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[F#][小ネタ] レコードリテラルと型注釈</title>
      <link>https://vain0x.github.io/blog/2018-03-11/fsharp-record-literal-and-type-annotation/</link>
      <pubDate>Sun, 11 Mar 2018 13:06:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-03-11/fsharp-record-literal-and-type-annotation/</guid>
      <description>&lt;p&gt;F# のレコードリテラルのちょっとした問題とちょっとした解決策。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>『コミットメッセージに「プレフィックス」をつける』を検討した</title>
      <link>https://vain0x.github.io/blog/2018-01-30/commit-message-prefixes/</link>
      <pubDate>Tue, 30 Jan 2018 22:40:38 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-01-30/commit-message-prefixes/</guid>
      <description>&lt;p&gt;Qiita で &lt;a href=&#34;https://qiita.com/numanomanu/items/45dd285b286a1f7280ed&#34;&gt;コミットメッセージに 「プレフィックス」 をつける&lt;/a&gt; というアイディアが紹介されていて、その効用の一つとして挙げられている:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プレフィックスを意識しながら順序立てて機能を作成する癖が身につく&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;という点が、試験運用していて実際に魅力的だと感じた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntuデスクトップを使い始めた</title>
      <link>https://vain0x.github.io/blog/2018-01-28/new-to-ubuntu/</link>
      <pubDate>Sun, 28 Jan 2018 17:53:43 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-01-28/new-to-ubuntu/</guid>
      <description>&lt;p&gt;普段づかいする環境をWindowsからUbuntuに移した話。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;要約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;もともと Windows 10 だった。&lt;/li&gt;
&lt;li&gt;Linux が便利らしいので、やってみたかった。&lt;/li&gt;
&lt;li&gt;調べてみたらかなり試す価値がありそうだった。&lt;/li&gt;
&lt;li&gt;安めのパソコンを買って試しているが、あまり問題がない。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>インテリセンス快適な構文とAPI</title>
      <link>https://vain0x.github.io/blog/2018-01-13/intellisense-comfortable/</link>
      <pubDate>Sat, 13 Jan 2018 23:08:23 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-01-13/intellisense-comfortable/</guid>
      <description>&lt;p&gt;インテリセンスの快適さと言語の構文に関するエッセイ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQLの検索条件と検索項目の分離</title>
      <link>https://vain0x.github.io/blog/2018-01-05/sql-search-only-keys/</link>
      <pubDate>Fri, 05 Jan 2018 23:30:37 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2018-01-05/sql-search-only-keys/</guid>
      <description>&lt;p&gt;複数の検索条件があるときに検索項目をselect句で毎回列挙するのがだるい問題について考えました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>async関数が例外を捕捉する挙動について</title>
      <link>https://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-12-23/async-function-and-exception/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[C#] コンストラクタの自動生成 #1</title>
      <link>https://vain0x.github.io/blog/2017-12-04/csharp-constructor-generation-01/</link>
      <pubDate>Mon, 04 Dec 2017 00:31:05 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-12-04/csharp-constructor-generation-01/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;要約&lt;/h2&gt;
&lt;p&gt;C# のフィールドや自動実装プロパティーの定義から、完全コンストラクターを自動生成したい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IReadOnlyListがIListを実装すべき理由</title>
      <link>https://vain0x.github.io/blog/2017-05-20/why-ireadonlylist-should-implement-ilist/</link>
      <pubDate>Sat, 20 May 2017 20:00:09 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-05-20/why-ireadonlylist-should-implement-ilist/</guid>
      <description>&lt;p&gt;主張: &lt;code&gt;IReadOnlyList&amp;lt;_&amp;gt;&lt;/code&gt; を実装するクラスは、 &lt;code&gt;IList&amp;lt;_&amp;gt;&lt;/code&gt; と &lt;code&gt;IList&lt;/code&gt; も実装したほうがいい。&lt;/p&gt;
&lt;p&gt;理由は2つあります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>awaitでスレッドを切り替える</title>
      <link>https://vain0x.github.io/blog/2017-04-05/switch-on-await/</link>
      <pubDate>Wed, 05 Apr 2017 15:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-04-05/switch-on-await/</guid>
      <description>&lt;p&gt;awaitでスレッドを切り替えるための簡単なヘルパーメソッドを作ったので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EnumerableTest(.NETの単体テストフレームワーク)の紹介と苦労話</title>
      <link>https://vain0x.github.io/blog/2017-03-21/enumerable-test/</link>
      <pubDate>Tue, 21 Mar 2017 13:39:33 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-21/enumerable-test/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://github.com/vain0x/EnumerableTest&#34;&gt;EnumerableTest&lt;/a&gt; という .NET 向けの単体テストフレームワークを作成しました。&lt;/p&gt;
&lt;p&gt;具体的な使い方は &lt;a href=&#34;https://vain0x.github.io/EnumerableTest/articles/tutorials/walk-around.html&#34;&gt;チュートリアル&lt;/a&gt; を参照してもらうとして、ここでは宣伝的な内容と、実装時の苦労話、今後の展望について述べます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>観測可能なコレクションの設計考察</title>
      <link>https://vain0x.github.io/blog/2017-03-10/observable-collection-design-notes/</link>
      <pubDate>Fri, 10 Mar 2017 14:42:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-10/observable-collection-design-notes/</guid>
      <description>&lt;p&gt;WPF 用のコレクションを設計しようとしてぐだぐだ考えた話をします。&lt;a href=&#34;https://github.com/DotNetKit/DotNetKit.Reactive/tree/z_observable_list_rwlock&#34;&gt;うまくいかない設計に基づく実装をけっこう書いてしまった&lt;/a&gt; ので、その供養でもあります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>break可能なループを書こう - 関数型プログラミングのテクニック</title>
      <link>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-03-05/breakable-loop-in-fsharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/vain0x/items/ddef84e3959dffe6a88d&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手続き型言語を使う人に「F# のループ (for/while) は &lt;code&gt;break&lt;/code&gt; できない」というと驚かれるかもしれません。筆者は驚きました。途中で終了する可能性のあるループを書けなくて困りそうですが、その心配は不要です。F# では &lt;strong&gt;末尾再帰関数&lt;/strong&gt; を使って、&lt;code&gt;break&lt;/code&gt; や &lt;code&gt;continue&lt;/code&gt; のあるループと同じことができるからです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>すごーい！ きみはプログラミング言語を実装できるフレンズなんだね</title>
      <link>https://vain0x.github.io/blog/2017-02-12/friends-lang/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2017-02-12/friends-lang/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/vain0x/items/6d3b75f667d3ec7f1d2a&#34;&gt;Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ジャパリパークのみんなー！ フレンズのためのプログラミング言語ができたよー！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WPF/XAMLで帳票のデザイン・印刷を行う</title>
      <link>https://vain0x.github.io/blog/2016-12-25/reports-with-wpf/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-12-25/reports-with-wpf/</guid>
      <description>&lt;p&gt;※これは &lt;a href=&#34;http://qiita.com/advent-calendar/2016/xaml&#34;&gt;XAML Advent Calendar 2016&lt;/a&gt; の25日目の記事です。&lt;/p&gt;
&lt;p&gt;WPF/XAML を使って帳票のデザインから印刷までやってみたという話です。ソースコードが GitHub にありますので、それと同様にやればできます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vain0x/VainZero.WpfReportPrinting&#34;&gt;vain0x/VainZero.WpfReportPrinting: WPFで帳票を作成するサンプル&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;要約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XAML というマークアップ言語で帳票のデザインから印刷までできれば、たくさんの利点がある。&lt;/li&gt;
&lt;li&gt;WPF アプリケーションで帳票のプレビューや印刷を行うサンプルを作った。&lt;/li&gt;
&lt;li&gt;ページネーションが大変だったけどなんとかなった。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>IReadOnlyListの列挙時にヒープ領域の使用を避ける</title>
      <link>https://vain0x.github.io/blog/2016-12-21/lists-with-no-alloc-enumerator/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-12-21/lists-with-no-alloc-enumerator/</guid>
      <description>&lt;p&gt;IReadOnlyListの列挙時にヒープ領域の使用を避ける方法を紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitEditを使うべき十の理由</title>
      <link>https://vain0x.github.io/blog/2016-12-07/why-git-edit/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-12-07/why-git-edit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/vain0x/GitEdit&#34;&gt;GitEdit&lt;/a&gt; とは、Git for Windows 用のエディターとして最適化されたテキストエディターです。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;要約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vi を覚えるのはめんどくさい。&lt;/li&gt;
&lt;li&gt;Git 用のテキストエディターとして使うための条件が意外と多い。&lt;/li&gt;
&lt;li&gt;結局、ふさわしいエディターが見つからなかったので自作した。&lt;/li&gt;
&lt;li&gt;ぜひ&lt;a href=&#34;https://github.com/vain0x/GitEdit/releases/latest&#34;&gt;ダウンロード&lt;/a&gt;して下さい。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Nullオブジェクトパターンの紹介と正体</title>
      <link>https://vain0x.github.io/blog/2016-08-18/null-object-patterns/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-08-18/null-object-patterns/</guid>
      <description>&lt;p&gt;デザインパターン「Nullオブジェクト」について解説します。加えて、後半でNullオブジェクトパターンに関する私見を述べます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PaketとGistで始める簡単パッケージ管理</title>
      <link>https://vain0x.github.io/blog/2016-05-10/package-management-with-paket-and-gist/</link>
      <pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate>
      <author>vainzerox@gmail.com (ベイン)</author>
      <guid>https://vain0x.github.io/blog/2016-05-10/package-management-with-paket-and-gist/</guid>
      <description>&lt;p&gt;対象読者: パッケージマネージャのないスクリプト言語のユーザー全般 (HSP3とか)&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;導入&lt;/h2&gt;
&lt;p&gt;モジュールと呼ばれるスクリプトは汎用的なため、使い回しが可能なわけですが、いかにして使い回すかはちょっとした問題です。
最初に思いつきそうな:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スクリプトが必要になるたびに、ファイルをコピーを作成して使う。(コピペ法)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という方法だと、例えばモジュールにバグがあった場合などにモジュールを書き換えた後、それらのコピーを上書きして回ることになります。
めんどうですね。&lt;/p&gt;
&lt;p&gt;そのため:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルをまとめておいておき、それを直接 #include して使う。 (共有法)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というようにしている人も少なくないでしょう。&lt;/p&gt;
&lt;p&gt;しかし、これにも少し問題があります。
スクリプトを配布するときに、どのファイルが必要なのか分からなくなるのです。
単純に「#include されているファイル」を集めるだけでは、「あるモジュールが他のモジュールを使用している」といった状況には対処できません。&lt;/p&gt;
&lt;p&gt;※不要なものも全部いっしょくたにして同梱してしまう、という富豪的な方法もあります。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>